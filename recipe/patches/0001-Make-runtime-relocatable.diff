diff --git a/internal/pkg/buildcfg/confgen/gen.go b/internal/pkg/buildcfg/confgen/gen.go
index d492e4bf3..889d62652 100644
--- a/internal/pkg/buildcfg/confgen/gen.go
+++ b/internal/pkg/buildcfg/confgen/gen.go
@@ -30,20 +30,79 @@ type Define struct {
 
 // WriteLine writes a line of configuration.
 func (d Define) WriteLine() (s string) {
-	s = "const " + d.Words[1] + " = " + d.Words[2]
-
+	s = d.Words[2]
 	if len(d.Words) > 3 {
+		for _, w := range d.Words[3:] {
+			s += " + " + w
+		}
 	}
 
-	for _, w := range d.Words[3:] {
-		s += " + " + w
+	// Apply runtime relocation to some variables
+	switch d.Words[1] {
+	case
+		"BINDIR",
+		"LIBEXECDIR",
+		"SYSCONFDIR",
+		"SESSIONDIR",
+		"SINGULARITY_CONFDIR",
+		"PLUGIN_ROOTDIR":
+		return "var " + d.Words[1] + " = RelocatePath(" + s + ")"
+	default:
+		var varType = "const"
+		// Some variables are defined relative to others and cannot be const
+		if strings.Contains(s, "SINGULARITY_CONFDIR") {
+			varType = "var"
+		}
+		return varType + " " + d.Words[1] + " = " + s
 	}
-	return s
 }
 
 var confgenTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
 package buildcfg
-{{ range $i, $d := . }}
+
+import (
+    "os"
+	"path/filepath"
+	"strings"
+)
+
+func RelocatePath(original string) (string) {
+	// For security, never allow relocation when built with SetUID support
+	if SINGULARITY_SUID_INSTALL == 1 {
+		return original
+	}
+
+	if ! strings.HasPrefix(original, "{{.Prefix}}") {
+		return original
+	}
+
+	executablePath, err := os.Executable()
+	if err != nil {
+		panic(err)
+	}
+	prefix := filepath.Dir(executablePath)
+
+	switch filepath.Base(executablePath) {
+	case "singularity":
+		// PREFIX/bin/singularity
+		prefix = filepath.Dir(prefix)
+	case "starter":
+		// PREFIX/libexec/singularity/bin/starter
+		prefix = filepath.Dir(filepath.Dir(filepath.Dir(prefix)))
+	default:
+		return original
+	}
+
+	relativePath, err := filepath.Rel("{{.Prefix}}", original)
+	if err != nil {
+		panic(err)
+	}
+
+	result := filepath.Join(prefix, relativePath)
+	return result
+}
+
+{{ range $i, $d := .Defines }}
 {{$d.WriteLine -}}
 {{end}}
 `))
@@ -64,12 +123,22 @@ func main() {
 
 	header := []Define{}
 	s := bufio.NewScanner(bytes.NewReader(inFile))
+	prefix := ""
 	for s.Scan() {
 		d := parseLine(s.Text())
 		if len(d.Words) > 2 && d.Words[0] == "#define" {
+			if d.Words[1] == "PREFIX" {
+				if len(d.Words) != 3 {
+					panic("Expected PREFIX to contain 3 elements")
+				}
+				prefix = d.Words[2]
+			}
 			header = append(header, d)
 		}
 	}
+	if prefix == "" {
+		panic("Failed to find value of PREFIX")
+	}
 
 	if goBuildTags := os.Getenv("GO_BUILD_TAGS"); goBuildTags != "" {
 		d := Define{
@@ -82,5 +151,12 @@ func main() {
 		header = append(header, d)
 	}
 
-	confgenTemplate.Execute(outFile, header)
+	data := struct {
+		Prefix  string
+		Defines []Define
+	}{
+		prefix[1 : len(prefix)-1],
+		header,
+	}
+	confgenTemplate.Execute(outFile, data)
 }
diff --git a/internal/pkg/plugin/meta.go b/internal/pkg/plugin/meta.go
index 079ab3cc0..b22114a57 100644
--- a/internal/pkg/plugin/meta.go
+++ b/internal/pkg/plugin/meta.go
@@ -20,7 +20,7 @@ import (
 	"github.com/sylabs/singularity/pkg/sylog"
 )
 
-const (
+var (
 	// rootDir is the root directory for the plugin
 	// installation, typically located within LIBEXECDIR.
 	rootDir = buildcfg.PLUGIN_ROOTDIR
