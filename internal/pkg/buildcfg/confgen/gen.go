// Copyright (c) 2018-2019, Sylabs Inc. All rights reserved.
// This software is licensed under a 3-clause BSD license. Please consult the
// LICENSE.md file distributed with the sources of this project regarding your
// rights to use or distribute this software.

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"text/template"
)

func parseLine(s string) (d Define) {
	d = Define{
		Words: strings.Fields(s),
	}

	return
}

// Define is a struct that contains one line of configuration words.
type Define struct {
	Words []string
}

// WriteLine writes a line of configuration.
func (d Define) WriteLine() (s string) {
	if len(d.Words) == 3 && len(d.Words[2]) == 1 {
		s = "const " + d.Words[1] + " = " + d.Words[2]
	} else {
		s = d.Words[2]
		for _, w := range d.Words[3:] {
			s += " + " + w
		}
		s = "var " + d.Words[1] + " = RelocatePath(" + s + ")"
	}

	return s
}

var confgenTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package buildcfg

import (
    "os"
	"path/filepath"
	"strings"
)

func RelocatePath(original string) (string) {
	if ! strings.HasPrefix(original, "{{.Prefix}}") {
		return original
	}

	executablePath, err := os.Executable()
	if err != nil {
		panic(err)
	}
	prefix := filepath.Dir(executablePath)

	switch filepath.Base(executablePath) {
	case "singularity":
		// PREFIX/bin/singularity
		prefix = filepath.Dir(prefix)
	case "starter":
		// PREFIX/libexec/singularity/bin/starter
		prefix = filepath.Dir(filepath.Dir(filepath.Dir(prefix)))
	case "bash_completion":
		return original
	default:
		panic("Unrecognised executable: " + executablePath)
	}

	relativePath, err := filepath.Rel("{{.Prefix}}", original)
	if err != nil {
		panic(err)
	}

	result := filepath.Join(prefix, relativePath)
	return result
}

{{ range $i, $d := .Defines }}
{{$d.WriteLine -}}
{{end}}
`))

func main() {
	outFile, err := os.Create("config.go")
	if err != nil {
		fmt.Println(err)
		return
	}
	defer outFile.Close()

	inFile, err := ioutil.ReadFile(os.Args[1])
	if err != nil {
		fmt.Println(err)
		return
	}

	header := []Define{}
	s := bufio.NewScanner(bytes.NewReader(inFile))
	prefix := ""
	for s.Scan() {
		d := parseLine(s.Text())
		if len(d.Words) > 2 && d.Words[0] == "#define" {
			if d.Words[1] == "PREFIX" {
				if len(d.Words) != 3 {
					panic("Expected PREFIX to contain 3 elements")
				}
				prefix = d.Words[2]
			}
			header = append(header, d)
		}
	}
	if prefix == "" {
		panic("Failed to find value of PREFIX")
	}

	if goBuildTags := os.Getenv("GO_BUILD_TAGS"); goBuildTags != "" {
		d := Define{
			Words: []string{
				"#define",
				"GO_BUILD_TAGS",
				fmt.Sprintf("`%s`", goBuildTags),
			},
		}
		header = append(header, d)
	}

	data := struct {
		Prefix string
		Defines []Define
	}{
		prefix[1:len(prefix)-1],
		header,
	}
	confgenTemplate.Execute(outFile, data)
}
